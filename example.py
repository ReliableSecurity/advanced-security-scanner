#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Advanced Security Scanner
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∫–∞–Ω–µ—Ä–∞
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from core.config_manager import ConfigManager
from scanners.nuclei_scanner import NucleiScanner
from scanners.tool_integrations import ToolIntegrationManager
from wstg_tests.wstg_core import WSTGCore
from api_tests.api_security_scanner import APISecurityScanner
from reports.report_generator import ReportGenerator

async def example_nuclei_scan():
    """–ü—Ä–∏–º–µ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å Nuclei"""
    print("üîç –ü—Ä–∏–º–µ—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å Nuclei")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = ConfigManager()
    scanner = NucleiScanner(config_manager)
    
    if not scanner.available:
        print("‚ùå Nuclei –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.")
        return None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    target = "https://httpbin.org"  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å
    options = {
        'templates': ['technologies'],  # –¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        'rate_limit': 50,
        'timeout': 5
    }
    
    print(f"üéØ –¶–µ–ª—å: {target}")
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {options}")
    print("‚è≥ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    result = await scanner.scan_async([target], options)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result['results'])}")
    
    if result['results']:
        print("\nüîç –ü–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        for i, finding in enumerate(result['results'][:3], 1):
            print(f"{i}. {finding.get('name', 'Unknown')}")
            print(f"   Severity: {finding.get('severity_level', 'info')}")
            print(f"   Host: {finding.get('host', 'N/A')}")
            print()
    
    return result

async def example_wstg_test():
    """–ü—Ä–∏–º–µ—Ä OWASP WSTG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüõ°Ô∏è –ü—Ä–∏–º–µ—Ä OWASP WSTG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = ConfigManager()
    wstg = WSTGCore(config_manager)
    
    target = "https://httpbin.org"
    print(f"üéØ –¶–µ–ª—å: {target}")
    print("‚è≥ –ó–∞–ø—É—Å–∫ WSTG —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ INFO
    results = await wstg.run_test_category(target, 'WSTG-INFO')
    
    print(f"\nüìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    
    for result in results:
        print(f"\nüß™ –¢–µ—Å—Ç: {result.test_name}")
        print(f"   ID: {result.test_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status}")
        print(f"   –ù–∞—Ö–æ–¥–æ–∫: {len(result.findings)}")
        
        if result.findings:
            print("   –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:")
            for finding in result.findings[:2]:
                print(f"   - {finding['description']} (Severity: {finding['severity']})")
    
    return results

async def example_api_security_scan():
    """–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüåê –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config_manager = ConfigManager()
    api_scanner = APISecurityScanner(config_manager)
    
    target = "https://httpbin.org"
    print(f"üéØ –¶–µ–ª—å: {target}")
    print("‚è≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ API endpoints...")
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ endpoints
    endpoints = await api_scanner.discover_endpoints(target)
    print(f"üìç –ù–∞–π–¥–µ–Ω–æ endpoints: {len(endpoints)}")
    
    if endpoints:
        print("üîç –ü–µ—Ä–≤—ã–µ 3 endpoint:")
        for i, endpoint in enumerate(endpoints[:3], 1):
            print(f"{i}. {endpoint.method} {endpoint.url}")
        
        print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º endpoint –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        test_results = await api_scanner.run_security_tests(
            endpoints[:1], 
            {'tests': ['data_exposure', 'error_handling']}  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        )
        
        print(f"üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(test_results)}")
        
        for result in test_results:
            print(f"\nüî¨ –¢–µ—Å—Ç: {result.test_name}")
            print(f"   Endpoint: {result.endpoint.method} {result.endpoint.url}")
            print(f"   –°—Ç–∞—Ç—É—Å: {result.status}")
            print(f"   –ù–∞—Ö–æ–¥–æ–∫: {len(result.findings)}")
    
    return endpoints

def example_report_generation(scan_data):
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìÑ –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    print("=" * 50)
    
    if not scan_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
    config_manager = ConfigManager()
    report_generator = ReportGenerator(config_manager)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    report_data = {
        'target': 'https://httpbin.org',
        'start_time': scan_data.get('start_time'),
        'end_time': scan_data.get('end_time'),
        'tool_results': {
            'nuclei': scan_data
        }
    }
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
        html_report = report_generator.generate_html_report(report_data, 'example_report.html')
        print(f"‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {html_report}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞
        json_report = report_generator.generate_json_report(report_data, 'example_report.json')
        print(f"‚úÖ JSON –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {json_report}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ Advanced Security Scanner - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 60)
    print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏.")
    print("‚ö†Ô∏è –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á—É–∂–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è!")
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ä–µ–¥–∞—Ö.")
    
    input("\nüìù –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    
    all_results = {}
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nuclei
        nuclei_result = await example_nuclei_scan()
        if nuclei_result:
            all_results['nuclei'] = nuclei_result
        
        # 2. OWASP WSTG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        wstg_results = await example_wstg_test()
        if wstg_results:
            all_results['wstg'] = {'results': wstg_results}
        
        # 3. API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        api_endpoints = await example_api_security_scan()
        if api_endpoints:
            all_results['api'] = {'endpoints': api_endpoints}
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        if all_results:
            example_report_generation(all_results.get('nuclei'))
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–∞:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
    except KeyboardInterrupt:
        print("\n\n‚èπ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")

if __name__ == "__main__":
    asyncio.run(main())